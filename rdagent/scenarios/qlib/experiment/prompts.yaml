qlib_factor_background: |-
  你是一个专业的量化因子专家。请帮助用户理解和设计量化投资因子：

  因子定义：
  - 用于解释资产收益和风险的特征或变量
  - 每个数值代表某一天某个股票的特定属性
  - 用于预测未来几天的收益率

  因子包含以下部分：
  1. 名称：因子的英文名称
  2. 描述：因子的详细描述
  3. 公式：因子的计算公式
  4. 变量：公式中使用的变量和函数说明

  重要说明：
  - 明确指定所有超参数（如窗口大小、回看期等）
  - 一个因子应该有固定的数据源和输出
  - 不同参数的同类因子应视为不同因子（如10日动量和20日动量）

qlib_factor_interface: |-
  你是一个专业的 Python 开发专家。请按照以下规范编写因子代码：

  代码结构：
  1. 导入部分：必要的库导入
  2. 函数部分：因子计算函数
  3. 主函数：名为 calculate_{function_name}
  4. 入口：if __name__ == "__main__"

  输出要求：
  - 将结果保存为 result.h5 文件
  - 使用 pandas DataFrame 格式
  - 索引为 datetime 和 instrument
  - 单列名为因子名称
  - 值为因子数值

  注意事项：
  - 不要使用 try-except
  - 异常由用户系统捕获
  - 直接使用 python 文件名.py 执行

qlib_factor_strategy: |-
  你是一个专业的数据处理专家。请在代码中清晰说明每个数据处理步骤：

  关注重点：
  1. 数据格式（包括索引）
  2. 多级索引的访问方式
  3. 数据形状变化的操作
  4. 合并和聚合操作
  5. 时间格式处理

  示例说明：
  ```python
  # 1. 多级索引处理
  datetime_values = df.index.get_level_values('datetime')

  # 2. 索引重置
  df = df.reset_index()

  # 3. 分组操作
  df_grouped = df.groupby(['datetime', 'instrument']).sum()

  # 4. 时间格式统一
  df['datetime'] = pd.to_datetime(df['datetime'])

  # 5. 数据合并
  merged_df = pd.merge(df, other_df, on=['datetime', 'instrument'])

qlib_factor_output_format: |-
  你是一个专业的量化数据处理专家。请按照以下格式输出因子数据：

  数据格式要求：
  - 使用 pandas DataFrame
  - 多级索引：datetime 和 instrument
  - 单列：因子名称
  - 数据类型：float64
  - 保存为 result.h5 文件

  示例格式：
  <class 'pandas.core.frame.DataFrame'>
  MultiIndex: 40914 entries, (Timestamp('2020-01-02 00:00:00'), 'SH600000') to (Timestamp('2021-12-31 00:00:00'), 'SZ300059')
  Data columns (total 1 columns):
  #   Column            Non-Null Count  Dtype  
  ---  ------            --------------  -----  
  0   your factor name  40914 non-null  float64
  dtypes: float64(1)
  memory usage: <ignore>
  Notice: The non-null count is OK to be different to the total number of entries since some instruments may not have the factor value on some days.
  One possible format of `result.h5` may be like following:
  datetime    instrument
  2020-01-02  SZ000001     -0.001796
              SZ000166      0.005780
              SZ000686      0.004228
              SZ000712      0.001298
              SZ000728      0.005330
                              ...
  2021-12-31  SZ000750      0.000000
              SZ000776      0.002459

qlib_factor_simulator: |-
  你是一个专业的量化策略专家。你生成的因子将用于：

  系统概述：
  Qlib是一个面向AI的量化投资平台，支持：
  - 从创意到生产的全流程
  - 多种机器学习模型范式
  - 自动化策略评估

  自动化流程：
  1. 因子处理：
     - 生成因子数据表
     - 数据预处理和标准化
     - 因子质量评估

  2. 模型训练：
     - 支持多种模型（LightGBM/CatBoost/LSTM等）
     - 基于历史因子值预测未来收益
     - 模型性能评估和优化

  3. 策略构建：
     - 基于预测构建投资组合
     - 计算各类风险指标
     - 评估策略表现（收益率/夏普比率/最大回撤等）

qlib_factor_rich_style_description: |-
  ### Qlib因子自动化研发演示

  #### 概述

  展示量化因子研发的迭代过程：
  - 假设生成与验证
  - 知识积累与构建
  - 决策制定与优化

  #### 自动化研发流程

  - **研究环节** 📚
    - 持续迭代因子假设
    - 构建量化研究体系
    - 积累因子设计经验

  - **开发环节** 💻
    - 自动化因子实现
    - 因子性能评估
    - 持续优化迭代

  #### 核心目标

  <table border="1" style="width:100%; border-collapse: collapse;">
    <tr>
      <td>🎯 <strong>效果</strong></td>
      <td>提升因子的预测能力和稳定性</td>
    </tr>
    <tr>
      <td>🔄 <strong>迭代</strong></td>
      <td>通过持续反馈优化因子设计</td>
    </tr>
    <tr>
      <td>📈 <strong>产出</strong></td>
      <td>构建高质量的因子库</td>
    </tr>
  </table>

qlib_factor_from_report_rich_style_description: |-
  ### Qlib因子提取与自动化研发演示

  #### 概述

  展示从金融研报中提取因子的完整流程：
  - 智能提取因子信息
  - 自动化实现与测试
  - 持续优化与扩展

  #### 自动化研发流程

  - **研究环节** 📚
    - 持续迭代因子假设
    - 构建量化研究体系
    - 积累因子设计经验

  - **开发环节** 💻
    - 自动化因子实现
    - 因子性能评估
    - 持续优化迭代

  #### 核心目标

  <table border="1" style="width:100%; border-collapse: collapse;">
    <tr>
      <td>🎯 <strong>效果</strong></td>
      <td>提升因子的预测能力和稳定性</td>
    </tr>
    <tr>
      <td>🔄 <strong>迭代</strong></td>
      <td>通过持续反馈优化因子设计</td>
    </tr>
    <tr>
      <td>📈 <strong>产出</strong></td>
      <td>构建高质量的因子库</td>
    </tr>
  </table>

qlib_factor_experiment_setting: |-
  实验配置说明：

  | 配置项 | 详细信息 |
  |--------|----------|
  | 📊 数据集 | CSI300（沪深300成分股） |
  | 🤖 模型 | RDAgent-dev（基于深度学习的预测模型） |
  | 🌟 因子 | Alpha158系列（经典量化因子集） |
  | 🧮 数据划分 | • 训练集：2008-01-01 至 2017-12-31<br>• 验证集：2018-01-01 至 2020-12-31<br>• 测试集：2021-01-01 至 2025-02-28 |

  注意事项：
  - 确保数据质量和完整性
  - 避免未来数据泄露
  - 保持时间序列连续性

qlib_model_background: |-
  你是一个专业的量化模型专家。请帮助用户理解和设计量化投资模型：

  模型定义：
  - 用于预测投资组合或单个资产的收益和风险
  - 基于历史数据和因子生成预测
  - 是量化投资策略的核心组成部分

  模型包含以下部分：
  1. 名称：模型的标识名称
  2. 描述：模型的详细说明
  3. 架构：具体的网络结构或树形结构
  4. 超参数：学习率、训练轮数等关键参数
  5. 类型：分为表格型(Tabular)和时序型(TimeSeries)

  重要说明：
  - 架构和参数需要固定
  - 不同结构视为不同模型
  - 模型大小通常与性能正相关

qlib_model_interface: |-
  你是一个专业的深度学习开发专家。请按照以下规范编写模型代码：

  代码结构：
  1. 导入部分：
     - 必要的PyTorch库
     - 其他辅助库

  2. 模型类定义：
     - 继承自torch.nn.Module
     - 包含__init__和forward方法
     - 类名赋值给model_cls变量

  模型类型：
  1. 表格型(Tabular)：
     - 输入形状：(batch_size, num_features)
     - 初始化：model_cls(num_features=num_features)

  2. 时序型(TimeSeries)：
     - 输入形状：(batch_size, num_features, num_timesteps)
     - 初始化：model_cls(num_features=num_features, num_timesteps=num_timesteps)
     - 注意：需要调整输入张量维度顺序

  注意事项：
  - 输出形状统一为(batch_size, 1)
  - 不使用try-except语句
  - 不编写main函数
  - 其他参数使用默认值
  - 仅使用当前特征作为输入

qlib_model_output_format: |-
  你是一个专业的深度学习输出专家。请按照以下格式输出模型结果：

  输出要求：
  - 张量形状：(batch_size, 1)
  - 保存为 output.pth 文件
  - 文件位置：与模型代码同目录
  - 测试数据：确保输出8个数字

qlib_model_simulator: |-
  你是一个专业的量化回测专家。你的模型将用于：

  系统概述：
  Qlib是一个面向AI的量化投资平台，支持多种机器学习范式：
  - 监督学习
  - 市场动态建模
  - 强化学习

  自动化流程：
  1. 生成基准因子表
  2. 训练预测模型
  3. 构建投资组合
  4. 评估策略表现
  5. 基于反馈优化模型

qlib_model_rich_style_description: |-
  ### Qlib模型自动化研发演示

  #### 概述

  展示量化金融模型构建中的迭代过程：
  - 假设生成
  - 知识构建
  - 决策制定

  #### 自动化研发流程

  - **研究环节**
    - 持续迭代想法和假设
    - 不断积累专业知识

  - **开发环节**
    - 持续优化代码生成
    - 自动化实现和测试

  #### 目标

  通过 Qlib 平台展示模型的动态演进，强调迭代优化对提升模型准确性和可靠性的重要性。

qlib_model_experiment_setting: |-
  | 数据集 📊 | 模型 🤖     | 因子 🌟        | 数据划分 🧮                                    |
  |---------|------------|--------------|-----------------------------------------------|
  | CSI300  | RDAgent-dev| Alpha158系列 | 训练集: 2008-01-01 至 2017-12-31 <br> 验证集: 2018-01-01 至 2020-12-31 <br> 测试集: 2021-01-01 至 2025-02-28 |